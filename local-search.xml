<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>不起眼作家培育法（零）</title>
    <link href="/%E5%86%99%E4%BD%9C/writing/sanderson00/"/>
    <url>/%E5%86%99%E4%BD%9C/writing/sanderson00/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h1><ul><li>2025.3.11：完成课程基本情况介绍笔记</li></ul><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>算上这一次学习桑德森的视频课，已经是第三次了：第一次是从Lunamos的电台听到这门课的内容，Lunamos将课程进行了总结精简，做成了一次电台节目，在这里第一次接触到了桑德森的“系统性”的、“学术性”的史诗奇幻（长篇）小说的写作知识；第二次则是正式的看完了整部课程进行补差。但是第二次完整看完整部课程时，一口气积累的内容过多，而且阅览速度较快，遂决定跟着这2025年新录的课程重走一遍“西游路”，跟着新的课程仔细梳理理论知识，并吸取其中的一些新的论点论据。</p><h1 id="内容介绍"><a href="#内容介绍" class="headerlink" title="内容介绍"></a>内容介绍</h1><h2 id="史诗奇幻的先天劣势"><a href="#史诗奇幻的先天劣势" class="headerlink" title="史诗奇幻的先天劣势"></a>史诗奇幻的先天劣势</h2><p>布兰登·桑德森（以下简称桑德森）的创意写作课程主要针对的是关于史诗奇幻小说的写作方式与理论。由于要描写一部史诗，史诗奇幻小说的篇幅注定短不了一点，导致了其拥有先天的劣势：</p><ul><li><strong>进入困难</strong>：就像一部RPG前期一样，铺垫内容，有大量的术语和设定概念需要学习；人物出场众多，也需要注意熟悉。</li><li><strong>节奏缓慢</strong>：在进入真正的主线之前，必定会需要进行大量的铺垫，包括对人物的塑造等，只有铺垫到位了等到爆发时才会激起大量的共鸣。</li><li><strong>无法独立阅读</strong>：这里的独立阅读是指书与书之间、大篇章与大篇章之间，是否可以单独（或者说从中间）开始阅读；由于史诗奇幻牵扯到大量的剧情和设定，一旦某个地方断链，就无法理解后文中的某些内容。</li></ul><p>但桑德森的作品基本上不受上面的劣势约束，所以他的写作理论值得一学。</p><h2 id="挖土还是打灰？"><a href="#挖土还是打灰？" class="headerlink" title="挖土还是打灰？"></a>挖土还是打灰？</h2><p>桑德森将描写这种庞大体系内容的写作方法分为了两派：<strong>园丁型</strong>和<strong>建筑师型</strong>。</p><p><strong>园丁型作者</strong>，又可称为<strong>发现式写作</strong>（Discovery）。这类作者往往是走到哪儿想到哪儿，以启发式的方式进行写作。作者通常自己也不知道剧情的走向，是把自己代入了主角的视角，带着好奇心去探索故事发展的走向。这种作品通常会有更好的角色，作者也有强烈的写作动机，但是很大概率会导致剧情前后矛盾和糟糕的结局。</p><p><strong>建筑师作者</strong>，又可称为<strong>大纲式写作</strong>（Outline，Outliner）。这类作者通常先打好地基，即先搭建好整部作品的大纲，对故事的整体节奏有足够的把控，然后根据大纲进行详细的写作。这样的作品通常有更好的情节、优秀的结构和结局，但是作者的写作动机会偏弱，这是因为在写作大纲时就相当于写过一遍小说了，要完成作品相当于第二次对小说进行创作。</p><p>但实际上很难有真正意义上的“建筑师”，实际上在搭建好大纲后，对剧情中某一情节的描写，通常也是启发式的，只是大方向上是遵从大纲的走向，所以不可轻易断言自己就是哪一写作流派。</p><h1 id="资料来源"><a href="#资料来源" class="headerlink" title="资料来源"></a>资料来源</h1><ol><li>2020年课程视频（熟肉）：<a href="https://space.bilibili.com/201720/lists/3030589?type=season">杨百翰大学2020年创意写作课：布兰登·桑德森——科幻与奇幻的写作之道</a></li><li>2020年课程视频（油管原址）：<a href="https://www.youtube.com/playlist?list=PLSH_xM-KC3Zv-79sVZTTj-YA6IAqh8qeQ">2020 Creative Writing Lectures at BYU</a></li><li>2025年课程视频（熟肉，更新中）：<a href="https://space.bilibili.com/201720/lists/4695769?type=season">杨百翰大学2025年创意写作课</a></li><li>桑德森油管主页：<a href="https://www.youtube.com/@BrandSanderson">Brandon Sanderson</a></li><li>布兰登·桑德森个人主页：<a href="https://www.brandonsanderson.com/">Dragon Steel</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>写作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>创意写作</tag>
      
      <tag>奇幻</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二〇二五—不当串子宣言</title>
    <link href="/uncategorized/zatsudan-kai/2025/2025_plan/2025_plan/"/>
    <url>/uncategorized/zatsudan-kai/2025/2025_plan/2025_plan/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="写在前面的碎碎念"><a href="#写在前面的碎碎念" class="headerlink" title="写在前面的碎碎念"></a>写在前面的碎碎念</h1><p><del>大家好！不知不觉就到了2025年！</del></p><p>实际上写这篇内容的时候已经是春节过后的一周多了，仍然还没有从五月病（春节亚种）中恢复过来，不知不觉就拖到了现在才开始写这么一篇新年新计划的记录（实际在计划中前两天就准备写了）。</p><p>最近的倒春寒比冬季本体还要冷上一个度，周边也有不少朋友感染风邪，替大家担心的同时也庆幸自己尚未抱恙。不过经这冷风一吹倒是也吹灭了不少做事的热情，再加上近期不见太阳，动力更是下降了几个度，导致了最近推进&#9632;&#9632;&#9632;&#9632;也没有什么灵感，甚至在洗澡的时候都想不到什么好的点子，前一段时间甚至又进入了<strong>迷子</strong>期。</p><p>这样看来，自己好像也不得不稍微振奋振奋精神，未来可期一下。计划已下👇，详见正篇。</p><h1 id="正篇——不当”串子”宣言！"><a href="#正篇——不当”串子”宣言！" class="headerlink" title="正篇——不当”串子”宣言！"></a>正篇——不当”串子”宣言！</h1><p>这里的“串子”指的是在不同领域窜来窜去的现象，就像本人看到一个新鲜玩意儿就想去凑热闹，结果被成堆的新内容霸占了时间，挤压了“正房”的空间（正统的串子我还是非常乐意的，师从佐佐木串子老师（看木柜子看的））。</p><p><strong>不当“串子”宣言：划定好自己今年想要研究学习了解的范畴，绝不串到界限以外！</strong></p><p>技术类：</p><ol><li>努力精进前后端内容，打造全栈技术栈（目前较宽泛，待后面慢慢落实）；</li><li><strong>失われた過去を求めて</strong>——找回<strong>硬件</strong>记忆，包含电路设计、嵌入式（ESP32和树莓派相关）；</li><li>编程语言界的时尚单品——<strong>Rust</strong>的继续学习，入脑入脑入脑入脑（还能配合硬件共同学习）；</li><li>LLM学习学习，至少了解它的基本内容；</li><li>&#9632;&#9632;引擎熟悉。</li></ol><p>非技术类：</p><ol><li>数学精进——保持逻辑上的清醒；</li><li>精罗养成计划；</li><li>目标！巴别塔研究生！——自然语言上的学习与突破；</li><li>加大写作强度！——保持文字上的流畅（看看前两年悲惨的更新记录）；</li><li>…</li></ol><p>（突然发现非技术类的内容好像不能太做限制，还是给自己留下一定的空间）</p><p>在这里提前展望自己2025年末已经离<strong>情报强者</strong>更近一步！</p><h1 id="“不动の大图书馆”扩容中"><a href="#“不动の大图书馆”扩容中" class="headerlink" title="“不动の大图书馆”扩容中"></a>“不动の大图书馆”扩容中</h1><p>“图书馆记录更新中…”</p><table><thead><tr><th></th><th>书名</th><th>作者</th><th>类型</th><th>开始时间</th><th>完成时间</th><th>阅读情况</th><th>记录情况</th><th>备注</th></tr></thead><tbody><tr><td><input type="checkbox" disabled></td><td>醉步男</td><td>小林泰三</td><td>科幻</td><td></td><td></td><td>已读完</td><td><strong>未完成记录</strong></td><td></td></tr><tr><td><input type="checkbox" disabled></td><td>克莱因壶</td><td>冈嶋二人</td><td>科幻、推理</td><td></td><td></td><td>已读完</td><td><strong>未完成记录</strong></td><td></td></tr><tr><td><input type="checkbox" disabled></td><td>魔戒三部曲</td><td>约翰·罗纳德·瑞尔·托尔金</td><td>奇幻</td><td></td><td></td><td>已读完</td><td><strong>未完成记录</strong></td><td>电影复习未完成</td></tr><tr><td><input type="checkbox" disabled></td><td>欧洲中世纪史</td><td>朱迪斯</td><td>历史</td><td></td><td></td><td>7%</td><td>-</td><td></td></tr><tr><td><input type="checkbox" disabled></td><td>自指引擎</td><td>圆城塔</td><td>科幻</td><td></td><td></td><td>未开始</td><td>-</td><td></td></tr><tr><td><input type="checkbox" disabled></td><td>虐杀器官</td><td>伊藤计划</td><td>科幻</td><td>2025.2.13</td><td>2025.2.19</td><td>已读完</td><td><strong>未完成记录</strong></td><td>待补完电影，本书记录预计与 <strong>《巴别塔》</strong> 一起作为“语言类”作品进行分析；另外还与 <strong>伊藤计划三部曲</strong> 一起进行记录</td></tr><tr><td><input type="checkbox" disabled></td><td>三进数世界</td><td>格雷格·伊根</td><td>科幻</td><td></td><td></td><td>未开始</td><td>-</td><td></td></tr><tr><td><input type="checkbox" disabled></td><td>枪炮、病菌与钢铁</td><td>贾雷德·戴蒙德</td><td>历史、人类史</td><td>2025.2.20</td><td></td><td>0%</td><td>-</td><td></td></tr><tr><td><input type="checkbox" disabled checked></td><td>象之首（エレファントヘッド）</td><td>白井智之</td><td>推理</td><td>2025.2.24</td><td>2025.2.26</td><td>已读完</td><td><strong>未完成记录</strong></td><td></td></tr><tr><td><input type="checkbox" disabled checked></td><td>中世纪人</td><td>艾琳·鲍尔</td><td>历史</td><td>2025.4.17</td><td>2025.5.16</td><td>已读完</td><td><strong>笔记整理中</strong></td><td>大量内容可以作为素材</td></tr><tr><td><input type="checkbox" disabled></td><td>北京折叠</td><td>郝景芳</td><td>科幻</td><td></td><td></td><td>未开始</td><td>-</td><td></td></tr><tr><td><input type="checkbox" disabled></td><td>奶酪与蛆虫：一个16世纪磨坊主的宇宙</td><td>卡洛·金茨堡</td><td>历史</td><td></td><td></td><td>未开始</td><td>-</td><td></td></tr><tr><td><input type="checkbox" disabled></td><td>海伯利安</td><td>丹·西蒙斯</td><td>科幻</td><td>2020</td><td></td><td>30%</td><td>-</td><td></td></tr></tbody></table><p>阅读情况更新：</p><ul><li>2025.2.20 完成《虐杀器官》的阅读。</li><li>2025.2.26 完成《象首》的阅读。</li><li>2025.5.17 <ul><li>完成《中世纪人》的阅读，记录进行中。</li><li>添加《北京折叠》、《奶酪与蛆虫》的阅读任务。</li></ul></li></ul><h1 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h1><ul><li>2025.2.12 更新本文第一版内容。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust中的特征Trait杂谈</title>
    <link href="/Rust/rust/traits/"/>
    <url>/Rust/rust/traits/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
    <categories>
      
      <category>Rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Rust</tag>
      
      <tag>编程语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust中的生命周期杂谈</title>
    <link href="/Rust/rust/lifetime/"/>
    <url>/Rust/rust/lifetime/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="引入：“悬垂”带来的内存管理问题"><a href="#引入：“悬垂”带来的内存管理问题" class="headerlink" title="引入：“悬垂”带来的内存管理问题"></a>引入：“悬垂”带来的内存管理问题</h1><p>“悬垂”是一种在内存管理中常见的问题，在支持指针的语言中会出现的是悬垂指针，而在Rust中出现的则是悬垂引用问题。</p><p>悬垂引用（Dangling References）可以进行通过悬垂指针（Dangling Pointer）进行类比。悬垂指针是在释放内存时保留了指向它的指针时产生的，此时指向的内存可能已经被分配给其它持有者，最终可能导致错误的结果。悬垂引用则是Rust中引用带来的问题，是引用指向了一个不再有效的内存位置，它又与Rust的生命周期模型和所有权模型相关。</p><p>在Rust中，悬垂引用是不被允许存在的。在试图创建一个一个悬垂引用时，Rust会通过编译时错误来避免这个问题。一个尝试创建悬垂引用的代码如下<a href="https://rustwiki.org/zh-CN/book/ch04-02-references-and-borrowing.html#%E6%82%AC%E5%9E%82%E5%BC%95%E7%94%A8dangling-references">[1]</a>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">reference_to_nothing</span> = <span class="hljs-title function_ invoke__">dangle</span>();<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">dangle</span>() <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">String</span> &#123;    <span class="hljs-comment">// 返回字符串的引用</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);   <span class="hljs-comment">// s是新字符串</span><br><br>    &amp;s <span class="hljs-comment">// 返回字符串s的引用</span><br>&#125; <span class="hljs-comment">// s离开作用域被丢弃，内存释放</span><br>  <span class="hljs-comment">// 此时返回的引用指向一个无效的String</span><br></code></pre></td></tr></table></figure><p>实际上这里应当返回一个<code>String</code>，此时函数体内的<code>s</code>被直接返回，该字符串的所有权被移动给外面调用该函数并赋值的变量。</p><p>如果运行上面的代码，会得到以下的错误信息<a href="https://rustwiki.org/zh-CN/book/ch04-02-references-and-borrowing.html#%E6%82%AC%E5%9E%82%E5%BC%95%E7%94%A8dangling-references">[1]</a>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">cargo run</span><br>   Compiling ownership v0.1.0 (file:///projects/ownership)<br>error[E0106]: missing lifetime specifier<br><span class="hljs-meta prompt_"> --&gt; </span><span class="language-bash">src/main.rs:5:16</span><br>  |<br>5 | fn dangle() -&gt; &amp;String &#123;<br>  |                ^ expected named lifetime parameter<br>  |<br>  = help: this function&#x27;s return type contains a borrowed value, but there is no value for it to be borrowed from<br>help: consider using the `&#x27;static` lifetime<br>  |<br>5 | fn dangle() -&gt; &amp;&#x27;static String &#123;<br>  |                ^^^^^^^^<br><br>For more information about this error, try `rustc --explain E0106`.<br>error: could not compile `ownership` due to previous error<br></code></pre></td></tr></table></figure><p>该错误信息提醒我们应当对返回的引用使用<code>&#39;static</code>的生命周期注释，引出了生命周期的话题，而关于该注释将在后文进行介绍，此处暂且不谈。</p><p>由此可以看出，Rust在编译阶段就可以避免这种“悬垂”的问题。这是因为在编译器里面有一个借用检查器，它会在编译时就比较各借用的作用域，确保所有借用都是有效的。</p><h1 id="保证安全的工具：借用检查器"><a href="#保证安全的工具：借用检查器" class="headerlink" title="保证安全的工具：借用检查器"></a>保证安全的工具：借用检查器</h1><p>借用这一概念基于Rust独特的所有权机制，它可以使Rust在不需要垃圾回收器的情况下保证内存的安全性。借用检查器基于两条基本原则来工作：</p><ul><li><strong>借用规则</strong>：任一时刻，一个资源要么被可变借用独占，要么由多个不可变借用共享；</li><li><strong>生命周期规则</strong>：引用必须总是有效的，确保引用不能比它引用的数据获得更久；</li></ul><p>其中，借用规则与读写锁的原理类似，还可以通过这一套规则来防止数据竞争，保证<strong>并发任务</strong>的安全性。</p><h1 id="生命周期：保证引用的有效性"><a href="#生命周期：保证引用的有效性" class="headerlink" title="生命周期：保证引用的有效性"></a>生命周期：保证引用的有效性</h1><p>在Rust中，每一个引用都有它的生命周期，即引用保持有效的作用域。在大多数时候是可以自动推断的，但也有引用以不同方式关联的情况，此时就需要使用泛型生命周期参数来注明关系，以保证运行时使用的引用是有效的。也就是说，生命周期最大的一个目的就是——<strong>避免产生悬垂引用</strong>。</p><h2 id="显式标注与隐式的自动推断（省略标注）"><a href="#显式标注与隐式的自动推断（省略标注）" class="headerlink" title="显式标注与隐式的自动推断（省略标注）"></a>显式标注与隐式的自动推断（省略标注）</h2><p>一个比较重要的问题就是：何时可以省略生命周期标注让编译器自行推断，而何时又必须使用显式标注？</p><p>关于这个问题，将在接下来的几个场景中进行讨论，但在此之前可以给出的是Rust中给出的<strong>生命周期省略规则</strong>（lifetime elision rules）<a href="https://rustwiki.org/zh-CN/book/ch10-03-lifetime-syntax.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9C%81%E7%95%A5lifetime-elision">[1]</a>。</p><h3 id="生命周期省略规则"><a href="#生命周期省略规则" class="headerlink" title="生命周期省略规则"></a>生命周期省略规则</h3><ol><li>每一个是引用的参数都有它自己的生命周期参数；<ul><li>该条规则适用于输入生命周期，即函数或方法的参数的生命周期；</li><li>举例：<code>fn foo&lt;&#39;a, &#39;b&gt;(x: &amp;&#39;a i32, y: &amp;&#39;b i32)</code>，<code>x</code>和<code>y</code>是两个对<code>i32</code>类型的引用，按照规则它们拥有自己的生命周期，此处用<code>&#39;a</code>和<code>&#39;b</code>进行标注；</li></ul></li><li>如果只有一个输入生命周期参数，那么它被赋予所有输出生命周期参数；<ul><li>该条规则适用于输出生命周期，即返回值的生命周期；</li><li>举例：<code>fn foo&lt;&#39;a&gt;(x: &amp;&#39;a i32) -&gt; &amp;&#39;a i32</code>，此处只有一个输入引用参数，只对应一个生命周期，则该生命周期也被赋予给返回值中的引用；</li></ul></li><li>如果方法有多个输入生命周期参数并且其中一个参数是<code>&amp;self</code>或<code>&amp;mut self</code>，说明是个对象的方法，则所有输出生命周期参数被赋予<code>self</code>的生命周期；<ul><li>该条规则适用于输出生命周期，且用于方法；</li></ul></li></ol><p>借用<a href="https://rustwiki.org/zh-CN/book/ch10-03-lifetime-syntax.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9C%81%E7%95%A5lifetime-elision">[1]</a>中的多参数情况下对三条规则的分析示例来解读这三条规则：</p><ul><li>给出一个函数签名，此时签名中的引用没有关联任何生命周期：<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">longest</span>(x: &amp;<span class="hljs-type">str</span>, y: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">str</span> &#123;&#125;<br></code></pre></td></tr></table></figure></li><li>应用第一条规则——每个引用参数有其自己的生命周期，这里称之为<code>&#39;a</code>和<code>&#39;b</code>，改写函数签名：<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">longest</span>&lt;<span class="hljs-symbol">&#x27;a</span>, <span class="hljs-symbol">&#x27;b</span>&gt;(x: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>, y: &amp;<span class="hljs-symbol">&#x27;b</span> <span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">str</span>&#123;&#125;<br></code></pre></td></tr></table></figure></li><li>应用第二条规则，由于函数存在多个生命周期，不适用于该种情况；</li><li>应用第三条规则，同样不适用，因为没有self；</li></ul><p>由此出现了一个问题，该函数并不能通过编译器的通过。因为在应用了三条规则之后，仍然无法确定返回值类型的生命周期。如何确定返回值的生命周期呢？</p><h3 id="函数中的泛型生命周期"><a href="#函数中的泛型生命周期" class="headerlink" title="函数中的泛型生命周期"></a>函数中的泛型生命周期</h3><p>以上一节中讨论的<code>longest</code>函数为例，它的作用是返回两个字符串中更长的那个字符串，其实现代码如下<a href="https://rustwiki.org/zh-CN/book/ch10-03-lifetime-syntax.html#%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">[1]</a>，其中生命周期标注已按上节的分析补全：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">longest</span>&lt;<span class="hljs-symbol">&#x27;a</span>, <span class="hljs-symbol">&#x27;b</span>&gt;(x: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>, y: &amp;<span class="hljs-symbol">&#x27;b</span> <span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">str</span> &#123;<br>    <span class="hljs-keyword">if</span> x.<span class="hljs-title function_ invoke__">len</span>() &gt; y.<span class="hljs-title function_ invoke__">len</span>() &#123;<br>        x<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        y<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该函数的内部实现包含一个选择分支结构，执行时只希望比较它们的长度而不转移所有权，所以传入了两个字符串的引用，而结果只有在运行时才能知晓，所以Rust无法得知返回的引用指向<code>x</code>还是<code>y</code>；借用检查器也不能确定<code>x</code>和<code>y</code>的生命周期如何与返回值生命周期关联。</p><p>实际上，Rust对带生命周期的签名函数有相应的限制：</p><ul><li>任何引用都必须拥有标注好的生命周期；</li><li>任何被返回的引用都必须有和某个输入量相同的生命周期或是静态类型（<code>static</code>）；</li></ul><p>也就是说可以对<code>longest</code>函数进行以下的修改：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">longest</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(x: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>, y: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>这表明对于生命周期<code>&#39;a</code>，函数会获取两个与<code>&#39;a</code>存在一样长的字符串slice，函数也会返回一个与<code>&#39;a</code>一样长的字符串slice。其实际含义是<code>longest</code>返回的引用的生命周期与传入该函数的生命周期的较小者一致，而函数不关心<code>x</code>和<code>y</code>具体存在多久，只知道有某个可以被<code>&#39;a</code>替代的作用域会满足该签名。被<code>&#39;a</code>替代的具体生命周期是<code>x</code>与<code>y</code>的作用域相重叠的部分，或者说是它们之中生命周期<strong>较小</strong>的那一个。</p><p>可以将上面的内容总结为下面几点：</p><ul><li>无法确定生命周期的情况下，需要使用显式标注的方式来标注引用的生命周期。</li><li>函数的返回值的输出生命周期要么与输入生命周期有关联（相同），要么应当是静态类型。</li><li>若返回值总返回其中一个参数，其他参数也可以不标注生命周期，因为它们之间没有关联。</li></ul><h3 id="方法中的泛型生命周期"><a href="#方法中的泛型生命周期" class="headerlink" title="方法中的泛型生命周期"></a>方法中的泛型生命周期</h3><p>方法的生命周期标注与函数类似，但是由生命周期省略规则的第三条，对于方法而言，是属于某一对象的，其参数里面包括<code>self</code>，也就是说<code>self</code>的生命周期会赋给所有的输出生命周期参数。因此，标注可以省略。</p><h3 id="结构体中的泛型生命周期"><a href="#结构体中的泛型生命周期" class="headerlink" title="结构体中的泛型生命周期"></a>结构体中的泛型生命周期</h3><p>当一个结构体的变量中存在引用时，就需要对结构体中的每一个引用添加生命周期标注，如下的示例代码<a href="https://rustwiki.org/zh-CN/rust-by-example/scope/lifetime/struct.html">[2]</a>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">NamedBorrowed</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt; &#123;<br>    x: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">i32</span>,<br>    y: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">i32</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，生命周期标注<code>&#39;a</code>的意思是该结构体的实例不能比这两个字段的引用存在的更久。</p><h2 id="特殊的生命周期：-static"><a href="#特殊的生命周期：-static" class="headerlink" title="特殊的生命周期：&#39;static"></a>特殊的生命周期：<code>&#39;static</code></h2><p><code>&#39;static</code>代表了静态生命周期，它可以存活于整个程序期间。特别地，所有的字符串字面量都拥有<code>&#39;static</code>生命周期。使变量拥有<code>&#39;static</code>生命周期有两种方式，它们把数据保存在可执行文件的只读内存取：</p><ul><li>使用<code>static</code>声明常量；</li><li>产生一个拥有<code>&amp;&#39;static str</code>类型的<code>string</code>字面量；</li></ul><p>另外，静态生命周期可以被强制转换成一个更短的生命周期<a href="https://rustwiki.org/zh-CN/rust-by-example/scope/lifetime/static_lifetime.html">[2]</a>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">static</span> NUM: <span class="hljs-type">i32</span> = <span class="hljs-number">18</span>;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">coerce_static</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(_: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">i32</span> &#123;<br>    &amp;NUM<br>&#125;<br></code></pre></td></tr></table></figure><p>上面这个函数返回对常量<code>NUM</code>的引用，但是其返回值的生命周期被设定为<code>&#39;a</code>，它一定比<code>&#39;static</code>更短，这种强制转换是合法的。</p><h2 id="用于约束"><a href="#用于约束" class="headerlink" title="用于约束"></a>用于约束</h2><p>由于生命周期也是泛型，所以也可以使用约束。</p><ul><li><code>T: &#39;a</code>：在<code>T</code>中的<strong>所有</strong>引用都必须比生命周期<code>&#39;a</code>长；</li><li><code>T: Trait + &#39;a</code>：<code>T</code>类型必须实现<code>Trait</code> trait，并且在<code>T</code>中的所有引用都必须比<code>&#39;a</code>活得更长。</li></ul><p>可以看出，<code>:</code>符号的含义在此处为位于前面的对象比位于符号后面的对象要活得更长。由此，也可以对生命周期进行约束：</p><ul><li><code>&#39;a: &#39;b</code>：<code>&#39;a</code>比<code>&#39;b</code>存活的时间更长，只要<code>&amp;&#39;b ()</code>有效，引用<code>&amp;&#39;a ()</code>就有效。</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] Rust程序语言设计. <a href="https://rustwiki.org/zh-CN/book/ch10-03-lifetime-syntax.html">https://rustwiki.org/zh-CN/book/ch10-03-lifetime-syntax.html</a><br>[2] Rust By Example. <a href="https://rustwiki.org/zh-CN/rust-by-example/scope/lifetime.html">https://rustwiki.org/zh-CN/rust-by-example/scope/lifetime.html</a><br>[3] Rust参考手册. <a href="https://rustwiki.org/zh-CN/reference/">https://rustwiki.org/zh-CN/reference/</a></p>]]></content>
    
    
    <categories>
      
      <category>Rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Rust</tag>
      
      <tag>编程语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始的图形学与游戏开发（零）</title>
    <link href="/%E5%9B%BE%E5%BD%A2%E5%AD%A6/graphics/graphics_note_0/"/>
    <url>/%E5%9B%BE%E5%BD%A2%E5%AD%A6/graphics/graphics_note_0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>严格来说，并不能算是真正的从零开始进行图形学的学习。在之前其实已经有看过相关课程对图形学的知识体系有了大致的概念，这里只是希望重新梳理知识点并记录学习的过程。</p><p>关于自己，其实在以前并不是研究图形学相关方向的，只是兴趣使然，也算是拓宽自己的知识面，选择了这样一个方向进行私下的研究，也并非希望研究出什么具体的成果来，但至少谈起这一方面希望自己有一个完整的知识体系架构。</p><h1 id="计划与阅读计划"><a href="#计划与阅读计划" class="headerlink" title="计划与阅读计划"></a>计划与阅读计划</h1><p><strong>更新中</strong></p><ol><li>以GAMES101为线索，从数学基础开始，沿着数学在不同方面的应用来进行学习与记录；</li><li>大致的顺序为：数学基础-图形变换-几何体表示-光线追踪-着色-阴影-物理相关内容；该顺序参考了“3D游戏编程中的数学”一书的目录整理而来，具体记录时可能视情况有所变更；</li><li>关于游戏开放方面的内容，在图形学基础之后进行目标设立；</li><li>具体实施时，先阅读相关参考资料后进行记录，为此设立暂定的阅读计划：</li></ol><ul><li>Mathematics for 3D Game Programming and Computer Graphics</li><li>*Computational Geometry</li><li>Fundamentals of Computer Graphics</li><li>Real-Time Rendering</li></ul><h1 id="笔记导览"><a href="#笔记导览" class="headerlink" title="笔记导览"></a>笔记导览</h1><p><strong>更新中</strong></p><p><a href="http://localhost:4000/2023/12/29/graphics/graphics_note_1/">一</a></p><h1 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h1><ol><li>2023-12-28：叙述整体学习框架，设立相关计划于目标；</li></ol>]]></content>
    
    
    <categories>
      
      <category>图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图形学</tag>
      
      <tag>游戏开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于我和不定期可能更新的杂谈</title>
    <link href="/uncategorized/about-me/"/>
    <url>/uncategorized/about-me/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于个人主页"><a href="#关于个人主页" class="headerlink" title="关于个人主页"></a>关于个人主页</h1><h2 id="关于个人"><a href="#关于个人" class="headerlink" title="关于个人"></a>关于个人</h2><p>一个喜欢传统纸质记录的人拖延至今终于搭建了个人主页。</p><p>本质是一个求知欲旺盛啥都想学但啥都不精的人，兴趣爱好是情报收集和ACGN，喜欢RPG和文字ADV游戏，守备范围也许算宽，梦想的职业是——拾穗人。</p><div class="note note-success">            <p><strong>有关拾穗人：</strong><a href="https://ff14.huijiwiki.com/wiki/%E8%90%A8%E9%9B%B7%E5%AE%89#%E6%8B%BE%E7%A9%97%E4%BA%BA%E6%80%BB%E4%BC%9A">拾穗人与拾穗人总会</a><br>是梦中情职，大概是不存在的。</p>          </div><p>主页上大概会记录一些笔记归档、杂谈和一些计划中和未计划的事，也可能会记录一些豆知识。</p><p>最近在学习图形学和游戏引擎。</p><h2 id="关于Pseudo-Zanarkand"><a href="#关于Pseudo-Zanarkand" class="headerlink" title="关于Pseudo Zanarkand"></a>关于Pseudo Zanarkand</h2><p>第一次见到Pseudo一词是在学习专业基础时，Pseudo code即伪代码，取“伪”一义；Zanarkand是游戏Final Fantasy X中对于主角一行人极为重要的地方，其意义对我也产生的重要的影响，是一个悲但浪漫的地方。</p><p>现实中大抵是不会存在这样的地方的，希望能和祈之子一样在梦里构筑自己的Zanarkand。</p><p>总之是自己做梦的地方。</p><h2 id="写博客的原因"><a href="#写博客的原因" class="headerlink" title="写博客的原因"></a>写博客的原因</h2><p>“正经人谁写日记啊！”</p><p>以及也许是一些文字练习。</p><p>一个比较重要的原因后续更新。</p><p>各种内容还在学习中。</p><hr><p><strong>2023.10.12更新</strong></p><p>一个重要的原因是受到了一个喜欢的up主（Lunamos）激励。Lunamos也是一名游戏玩家，有一个专题节目叫“游戏通鉴”，内容主要是怀旧主题，讲述一些老游戏的游戏体验和故事的主要内容，并且还有多种讲述方式，其中以“电子书”形式的讲述最引入入胜，以第一人称叙述将听众&#x2F;观众带入故事当中，在通勤或者吃饭的时候也可以当作背景音。</p><p>另外根据Luna自己在节目中的叙述，我个人推测是在日本从事图形学开发的相关工作，这也一定程度上让我找回了当初专业选择的初心，也促使我在前一段时间一直沉浸在图形学的相关知识中（虽然没入脑多少）。</p><p>在我看来一个文案极佳，善于演说的人突然有一天悄没声的在自己的小号上开始了电台节目，个人在电台里叙说是为了锻炼自己的口才。于是我开始了自己早已打算的博客搭建，一来是向他学习，二来是慢慢找回写作的手感，同时也是锻炼自己的逻辑思维，改善我长时间以来下笔写文文字支离破碎的问题。</p><h1 id="更新中与已完结"><a href="#更新中与已完结" class="headerlink" title="更新中与已完结"></a>更新中与已完结</h1><ul><li>从零开始的图形学与游戏开发（绝赞滞后中）</li><li>硬件记忆找回作战（更新中，从电路基础开始）</li></ul><h1 id="TodoList"><a href="#TodoList" class="headerlink" title="TodoList"></a>TodoList</h1><ul><li>记录日课</li><li>某些企划的文字记录</li><li>最近在阅读游戏设计相关书籍，也许会慢慢开始写一些游戏日志（主要谈游玩体验）</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
